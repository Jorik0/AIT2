init module {
	knowledge{
		% onRoute succeeds when Level is in the current direction Dir relative to the position the agent is at.
		onRoute(Level, Dir) :- carPosition(Here), dir(Dir), Diff is Level-Here, (Diff<0 -> Dir=down; Dir=up).
		
		%first check if there even is a task with ID id (to prevent prolog errors), then check if we bid on it
		answered(ID) :- task(_,_,ID), sent(_,bid(ID,_)).
	}
	beliefs{
		% The direction that will be shown to the people at the next stop.
		% This remains the intended direction of movement until there are no more
		% planned stops in that direction.
		dir(down).
		% Initially, it is unknown whether doors are open or closed.
		doorState(unknown).
		people(0).
		timefactor(0).
		carPosition(0).
	}
	goals{
	}
	actionspec{
		% The action goto(Level, Dir) moves the elevator car to floor Level. It can
		% only be performed if the elevator car is docked and not moving, i.e.,
		% atFloor(Here) holds for some Here.
		% When the elevator arrives at the requested floor, the Dir light will turn on.
		goto(Level, Dir) {
		   pre{ atFloor(Here), dir(DirNow), doorState(closed) }
		   post{ not(dir(DirNow)), dir(Dir)}
		}
	}
}
	
main module {
	program {		
		#define constants(A,B,C,D,E,Eps) 
			bel(A is 1,B is 1,C is 5,D is 1,E is 10, Eps is 0.0001).
			
		#define numJobs(NumJobs)
			bel(aggregate_all(count,assigned(ID),not(completed(ID)),NumJobs)).
			
		#define onRouteMacro(OnRoute,Destination,DestinationDir)
			bel(onRoute(Destination,DestinationDir) -> OnRoute is 1 ; OnRoute is 0).
		
		%Check if a task has been completed by me
		if bel(assigned(ID), task(Floor,Dir,ID), atFloor(Floor), dir(Dir), not(completed(ID))) then
			(manager).send(completed(ID)) + insert(completed(ID)).
			
		%Check if a task has been completed by another agent (and I wasn't going there anyway)
		forall bel(assigned(ID), task(Floor,Dir,ID), not(completed(ID)), not(fButtonOn(Floor,Dir)), not(eButtonOn(Floor))) do
			(manager).send(completed(ID)) + insert(completed(ID)) + drop(atFloor(Floor),dir(Dir)).
		
		%Send bid
		if a-goal(answered(ID)), bel(task(Destination,DestinationDir,ID)),
			constants(A,B,C,D,E,Eps),
			numJobs(NumJobs),		
			bel(((numJobs = 0) -> Jobless = 1 ; Jobless = 0)),
			onRouteMacro(OnRoute,Destination,DestinationDir),
			bel(capacity(Capacity), people(People), carPosition(Pos)),
			bel(Bid is 
			A*(Capacity/(Capacity-People+Eps)) 
			- B*abs(Destination-Pos)
			+ C*Jobless
			- D*NumJobs
			+ E*OnRoute)  then
				(manager).send(bid(ID,Bid)).		
		
		
		% Goto the nearest floor that the agent wants to go to.
 		if a-goal( atFloor(Level), dir(Dir) ),
 			bel( atFloor(Here), Distance is abs(Level-Here) ),
 		    not(a-goal( atFloor(OtherLevel),
 				OtherDistance is abs(OtherLevel-Here), OtherDistance<Distance) )
 		then goto(Level, Dir).
	}
}
	
event module {
	program {		
		% The atFloor(Level) percept is received only when elevator has stopped at a floor Level (in this case the floorbutton is turned off).
		forall bel( percept(atFloor(Level)), not(atFloor(Level))) do 
			insert( atFloor(Level) ).
			
		forall bel( atFloor(Level), not(percept(atFloor(Level))) ) do
			delete( atFloor(Level) ).
			
		%Process people(N) (the amount of people in the car)	
		forall bel(percept(people(N)), people(Old)) do
			 delete(people(Old)) + insert(people(N)).
			 
		%Process capacity(N) (only send at start of simulation)
		forall bel(percept(capacity(N))) do
			insert(capacity(N)).
			
		%Process floorCount(N) (only send at start of simulation)
		forall bel(percept(floorCount(N))) do
			insert(floorCount(N)).
			
		%Process carPosition(L), L is a floating point position indicator that also updates when the car is moving
		forall bel(percept(carPosition(L)), carPosition(Old), L \= Old) do
			delete(carPosition(Old)) + insert(carPosition(L)).
			
		%Process timefactor(T)	
		forall bel(percept(timefactor(T)), timefactor(Old), T \= Old) do
			delete(timefactor(Old)) + insert(timefactor(T)).
				
		% The fButton(Level,Dir) percept indicates that the up or down (Dir) button on floor Level has been pressed.
		forall bel( percept(fButtonOn(Level,Dir)), not(fButtonOn(Level,Dir))) do 
			insert( fButtonOn(Level,Dir) )  + (manager).send(fButtonOn(Level, Dir)).
			
		forall bel( fButtonOn(Level,Dir), not(percept(fButtonOn(Level,Dir))) ) do 
			delete( fButtonOn(Level,Dir) ) + (manager).send(fButtonOff(Level, Dir)).
		
		% The doorState percept is received only if the door state has changed.
		% So we do not need to check whether the New value is different from the Old value to avoid unnecessary updates.
		forall bel( percept(doorState(New)), doorState(Old) ) do 
			insert( not(doorState(Old)), doorState(New) ).

		% Process bid requests
		forall bel(received(manager,int(bid(Level,Dir,ID)))) do 
			insert(task(Level,Dir,ID)) + adopt(answered(ID)) + delete(received(manager,int(bid(Level,Dir,ID)))).
		
		%Process task assignments
		forall bel(received(manager,imp(completed(ID))), task(Level,Dir,ID)) do 
			adopt(atFloor(Level),dir(Dir)) + insert(assigned(ID)) + delete(received(manager,imp(completed(ID)))).
		
		%Process eButtonOn(Level)
		forall bel(percept(eButtonOn(Level)), not(eButtonOn(Level)), dir(Dir)) do
			insert(eButtonOn(Level)) + adopt(atFloor(Level),dir(Dir)).
			
		forall bel(eButtonOn(Level), not(percept(eButtonOn(Level)))) do
			delete(eButtonOn(Level)).			
	}
}
